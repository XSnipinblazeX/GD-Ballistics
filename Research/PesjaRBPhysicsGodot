#this is just a test I will never actually use this as I am content with my own ballistic trajectory


extends RigidBody3D

@export var ballistic_coefficient: float = 0.0
@export var bullet_mass: float = 0.0
@export var bullet_diameter: float = 0.0
@export var bullet_length: float = 0.0
@export var muzzle_velocity: float = 0.0
@export var barrel_twist: float = 0.0
@export var temperature: float = 0.0
@export var air_pressure: float = 0.0
@export var current_latitude: float = 0.0

@export var wind_vect: Vector3 = Vector3.ZERO

enum GModel { G1, G2, G5, G6, G7, G8 }
@export var bullet_g_model: GModel = GModel.G1

var GRAVITY_AMOUNT: float = -9.80665
var DT: float = 0.0
var START_TIME: float = 0.0

var velocity_magnitude: float = 0.0
var retardation: float = 0.0
var drag: float = 0.0

var stability_factor: float = 0.0
var time_of_flight: float = 0.0
var bullet_direction: float = 0.0

var distance: float = 0.0

var START_POSITION: Vector3 = Vector3.ZERO
var GRAVITY: Vector3 = Vector3.ZERO
var vector_drag: Vector3 = Vector3.ZERO
var vector_coriolis: Vector3 = Vector3.ZERO

func _ready():
    convert_units()
    set_initial_parameters()
    calculate_stability_factor()

func _physics_process(delta: float):
    DT = delta
    get_speed()
    get_tof()
    _get_position()
    calculate_retardation()
    calculate_drag()
    calculate_coriolis()
    update_velocity()

func set_initial_parameters():
    START_TIME = OS.get_ticks_msec() / 1000.0
    START_POSITION = global_transform.origin
    GRAVITY = Vector3(0, GRAVITY_AMOUNT, 0) * DT
    muzzle_velocity *= 0.3048  # Convert feet per second to meters per second

func calculate_stability_factor():
    var l_calibers = bullet_length / bullet_diameter
    var twist_calibers = barrel_twist / bullet_diameter
    stability_factor = 30 * bullet_mass / (pow(twist_calibers, 2) * pow(bullet_diameter, 3) * l_calibers * (1 + pow(l_calibers, 2)))
    stability_factor *= pow((muzzle_velocity / 2800.0), 1.0 / 3.0)
    stability_factor *= (temperature + 273.15) / (15 + 273.15) * 1013.25 / air_pressure

func convert_units():
    current_latitude = deg2rad(current_latitude)
    temperature = (temperature - 32) * 5.0 / 9.0
    air_pressure *= 33.863886666718315

func get_speed():
    velocity_magnitude = linear_velocity.length()
    # True velocity accounting for wind is updated in `update_velocity`

func get_tof():
    #time_of_flight = (OS.get_ticks_msec() / 1000.0) - START_TIME

func _get_position():
    bullet_direction = atan2(linear_velocity.z, linear_velocity.x)
    distance = START_POSITION.distance_to(global_transform.origin)

func calculate_retardation():
    var vel_fps = velocity_magnitude * 3.2808399  # Convert m/s to fps
    var A: float = 0.0
    var M: float = 0.0

    match bullet_g_model:
        GModel.G1:
            # Example ranges for G1
            if vel_fps > 4230: A = 1.477404177730177e-04; M = 1.9565
            elif vel_fps > 3680: A = 1.920339268755614e-04; M = 1.925
            # Add more conditions here as needed
        GModel.G2:
            # Implement G2 model calculations similarly to G1.
            pass
        GModel.G5:
            # Implement G5 model calculations similarly to G1.
            pass
        GModel.G6:
            # Implement G6 model calculations similarly to G1.
            pass
        GModel.G7:
            # Implement G7 model calculations similarly to G1.
            pass
        GModel.G8:
            # Implement G8 model calculations similarly to G1.
            pass

    drag = (1 / (velocity_magnitude * 0.0254)) * (retardation * (muzzle_velocity * 0.0254) * velocity_magnitude)

func calculate_drag():
    var drag_coefficient: float = 0.47  # Example drag coefficient
    var air_density: float = 1.225  # kg/m^3 at sea level
    var diameter: float = bullet_diameter / 1000.0  # Convert mm to meters
    var cross_sectional_area: float = PI * pow(diameter / 2.0, 2)
    
    var drag_force: Vector3 = -drag_coefficient * air_density * cross_sectional_area * pow(velocity_magnitude, 2) * linear_velocity.normalized()
    vector_drag = drag_force / bullet_mass

func calculate_coriolis():
    var omega: float = 2 * PI / 24 / 3600  # Earth rotation rate in radians/second
    var coriolis_force: Vector3 = omega * velocity_magnitude * Vector3(-linear_velocity.z, 0, linear_velocity.x).normalized()
    vector_coriolis = coriolis_force / bullet_mass

func update_velocity():
    linear_velocity += GRAVITY + vector_drag + vector_coriolis
